:py:mod:`anomalib.utils.callbacks`
==================================

.. py:module:: anomalib.utils.callbacks

.. autoapi-nested-parse::

   Callbacks for Anomalib models.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   cdf_normalization/index.rst
   compress/index.rst
   min_max_normalization/index.rst
   model_loader/index.rst
   nncf_callback/index.rst
   save_to_csv/index.rst
   timer/index.rst
   visualizer_callback/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   anomalib.utils.callbacks.CompressModelCallback
   anomalib.utils.callbacks.LoadModelCallback
   anomalib.utils.callbacks.SaveToCSVCallback
   anomalib.utils.callbacks.TimerCallback
   anomalib.utils.callbacks.VisualizerCallback




.. py:class:: CompressModelCallback(input_size: Tuple[int, int], dirpath: str, filename: str)

   Bases: :py:obj:`pytorch_lightning.Callback`

   Callback to compresses a trained model.

   Model is first exported to ``.onnx`` format, and then converted to OpenVINO IR.

   :param input_size: Tuple of image height, width
   :type input_size: Tuple[int, int]
   :param dirpath: Path for model output
   :type dirpath: str
   :param filename: Name of output model
   :type filename: str

   .. py:method:: on_train_end(self, trainer, pl_module: pytorch_lightning.LightningModule) -> None

      Call when the train ends.

      Converts the model to ``onnx`` format and then calls OpenVINO's model optimizer to get the
      ``.xml`` and ``.bin`` IR files.



.. py:class:: LoadModelCallback(weights_path)

   Bases: :py:obj:`pytorch_lightning.Callback`

   Callback that loads the model weights from the state dict.

   .. py:method:: on_test_start(self, trainer, pl_module: pytorch_lightning.LightningModule) -> None

      Call when the test begins.

      Loads the model weights from ``weights_path`` into the PyTorch module.



.. py:class:: SaveToCSVCallback

   Bases: :py:obj:`pytorch_lightning.Callback`

   Callback that saves the inference results of a model.

   The callback generates a csv file that saves the predicted label, the true label and the image name.

   .. py:method:: on_test_epoch_end(self, _trainer: pytorch_lightning.Trainer, pl_module: anomalib.models.components.AnomalyModule) -> None

      Save Results at the end of testing.

      :param _trainer: Pytorch lightning trainer object (unused)
      :type _trainer: Trainer
      :param pl_module: Lightning modules derived from BaseAnomalyLightning object.
      :type pl_module: LightningModule



.. py:class:: TimerCallback

   Bases: :py:obj:`pytorch_lightning.Callback`

   Callback that measures the training and testing time of a PyTorch Lightning module.

   .. py:method:: on_fit_start(self, trainer: pytorch_lightning.Trainer, pl_module: pytorch_lightning.LightningModule) -> None

      Call when fit begins.

      Sets the start time to the time training started.

      :param trainer: PyTorch Lightning trainer.
      :type trainer: Trainer
      :param pl_module: Current training module.
      :type pl_module: LightningModule

      :returns: None


   .. py:method:: on_fit_end(self, trainer: pytorch_lightning.Trainer, pl_module: pytorch_lightning.LightningModule) -> None

      Call when fit ends.

      Prints the time taken for training.

      :param trainer: PyTorch Lightning trainer.
      :type trainer: Trainer
      :param pl_module: Current training module.
      :type pl_module: LightningModule

      :returns: None


   .. py:method:: on_test_start(self, trainer: pytorch_lightning.Trainer, pl_module: pytorch_lightning.LightningModule) -> None

      Call when the test begins.

      Sets the start time to the time testing started.
      Goes over all the test dataloaders and adds the number of images in each.

      :param trainer: PyTorch Lightning trainer.
      :type trainer: Trainer
      :param pl_module: Current training module.
      :type pl_module: LightningModule

      :returns: None


   .. py:method:: on_test_end(self, trainer: pytorch_lightning.Trainer, pl_module: pytorch_lightning.LightningModule) -> None

      Call when the test ends.

      Prints the time taken for testing and the throughput in frames per second.

      :param trainer: PyTorch Lightning trainer.
      :type trainer: Trainer
      :param pl_module: Current training module.
      :type pl_module: LightningModule

      :returns: None



.. py:class:: VisualizerCallback(inputs_are_normalized: bool = True)

   Bases: :py:obj:`pytorch_lightning.Callback`

   Callback that visualizes the inference results of a model.

   The callback generates a figure showing the original image, the ground truth segmentation mask,
   the predicted error heat map, and the predicted segmentation mask.

   To save the images to the filesystem, add the 'local' keyword to the `project.log_images_to` parameter in the
   config.yaml file.

   .. py:method:: _add_images(self, visualizer: anomalib.post_processing.Visualizer, module: anomalib.models.components.AnomalyModule, filename: pathlib.Path)

      Save image to logger/local storage.

      Saves the image in `visualizer.figure` to the respective loggers and local storage if specified in
      `log_images_to` in `config.yaml` of the models.

      :param visualizer: Visualizer object from which the `figure` is saved/logged.
      :type visualizer: Visualizer
      :param module: Anomaly module which holds reference to `hparams` and `logger`.
      :type module: AnomalyModule
      :param filename: Path of the input image. This name is used as name for the generated image.
      :type filename: Path


   .. py:method:: on_test_batch_end(self, _trainer: pytorch_lightning.Trainer, pl_module: pytorch_lightning.LightningModule, outputs: Optional[pytorch_lightning.utilities.types.STEP_OUTPUT], _batch: Any, _batch_idx: int, _dataloader_idx: int) -> None

      Log images at the end of every batch.

      :param _trainer: Pytorch lightning trainer object (unused).
      :type _trainer: Trainer
      :param pl_module: Lightning modules derived from BaseAnomalyLightning object as
      :type pl_module: LightningModule
      :param currently only they support logging images.:
      :param outputs: Outputs of the current test step.
      :type outputs: Dict[str, Any]
      :param _batch: Input batch of the current test step (unused).
      :type _batch: Any
      :param _batch_idx: Index of the current test batch (unused).
      :type _batch_idx: int
      :param _dataloader_idx: Index of the dataloader that yielded the current batch (unused).
      :type _dataloader_idx: int


   .. py:method:: on_test_end(self, _trainer: pytorch_lightning.Trainer, pl_module: pytorch_lightning.LightningModule) -> None

      Sync logs.

      Currently only ``AnomalibWandbLogger`` is called from this method. This is because logging as a single batch
      ensures that all images appear as part of the same step.

      :param _trainer: Pytorch Lightning trainer (unused)
      :type _trainer: pl.Trainer
      :param pl_module: Anomaly module
      :type pl_module: pl.LightningModule



