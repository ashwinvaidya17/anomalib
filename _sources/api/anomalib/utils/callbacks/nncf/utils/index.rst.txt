:py:mod:`anomalib.utils.callbacks.nncf.utils`
=============================================

.. py:module:: anomalib.utils.callbacks.nncf.utils

.. autoapi-nested-parse::

   Utils for NNCf optimization.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   anomalib.utils.callbacks.nncf.utils.InitLoader



Functions
~~~~~~~~~

.. autoapisummary::

   anomalib.utils.callbacks.nncf.utils.wrap_nncf_model
   anomalib.utils.callbacks.nncf.utils.is_state_nncf
   anomalib.utils.callbacks.nncf.utils.compose_nncf_config
   anomalib.utils.callbacks.nncf.utils.merge_dicts_and_lists_b_into_a
   anomalib.utils.callbacks.nncf.utils._merge_dicts_and_lists_b_into_a



Attributes
~~~~~~~~~~

.. autoapisummary::

   anomalib.utils.callbacks.nncf.utils.logger


.. py:data:: logger
   

   

.. py:class:: InitLoader(data_loader: torch.utils.data.dataloader.DataLoader)

   Bases: :py:obj:`nncf.torch.initialization.PTInitializingDataLoader`

   Initializing data loader for NNCF to be used with unsupervised training algorithms.

   .. py:method:: __iter__(self)

      Create iterator for dataloader.


   .. py:method:: __next__(self) -> Any

      Return next item from dataloader iterator.


   .. py:method:: get_inputs(self, dataloader_output) -> Tuple[Tuple, Dict]

      Get input to model.

      :returns: Tuple[Tuple, Dict]: The current model call to be made during
                the initialization process
      :rtype: (dataloader_output,), {}


   .. py:method:: get_target(self, _)

      Return structure for ground truth in loss criterion based on dataloader output.

      This implementation does not do anything and is a placeholder.

      :returns: None



.. py:function:: wrap_nncf_model(model: torch.nn.Module, config: Dict, dataloader: torch.utils.data.dataloader.DataLoader = None, init_state_dict: Dict = None) -> Tuple[nncf.api.compression.CompressionAlgorithmController, nncf.torch.nncf_network.NNCFNetwork]

   Wrap model by NNCF.

   :param model: Anomalib model.
   :param config: NNCF config.
   :param dataloader: Dataloader for initialization of NNCF model.
   :param init_state_dict: Opti
   :return: compression controller, compressed model


.. py:function:: is_state_nncf(state: Dict) -> bool

   The function to check if sate is the result of NNCF-compressed model.


.. py:function:: compose_nncf_config(nncf_config: Dict, enabled_options: List[str]) -> Dict

   Compose NNCf config by selected options.

   :param nncf_config:
   :param enabled_options:
   :return: config


.. py:function:: merge_dicts_and_lists_b_into_a(a, b)

   The function to merge dict configs.


.. py:function:: _merge_dicts_and_lists_b_into_a(a, b, cur_key=None)

   The function is inspired by mmcf.Config._merge_a_into_b.

   * works with usual dicts and lists and derived types
   * supports merging of lists (by concatenating the lists)
   * makes recursive merging for dict + dict case
   * overwrites when merging scalar into scalar
   Note that we merge b into a (whereas Config makes merge a into b),
   since otherwise the order of list merging is counter-intuitive.


