:py:mod:`anomalib.utils.loggers.tensorboard`
============================================

.. py:module:: anomalib.utils.loggers.tensorboard

.. autoapi-nested-parse::

   Tensorboard logger with add image interface.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   anomalib.utils.loggers.tensorboard.AnomalibTensorBoardLogger




.. py:class:: AnomalibTensorBoardLogger(save_dir: str, name: Optional[str] = 'default', version: Optional[Union[int, str]] = None, log_graph: bool = False, default_hp_metric: bool = True, prefix: str = '', **kwargs)

   Bases: :py:obj:`anomalib.utils.loggers.base.ImageLoggerBase`, :py:obj:`pytorch_lightning.loggers.tensorboard.TensorBoardLogger`

   Logger for tensorboard.

   Adds interface for `add_image` in the logger rather than calling the experiment object.

   .. note:: Same as the Tensorboard Logger provided by PyTorch Lightning and the doc string is reproduced below.

   Logs are saved to
   ``os.path.join(save_dir, name, version)``. This is the default logger in Lightning, it comes
   preinstalled.

   .. rubric:: Example

   >>> from pytorch_lightning import Trainer
   >>> from anomalib.utils.loggers import AnomalibTensorBoardLogger
   >>> logger = AnomalibTensorBoardLogger("tb_logs", name="my_model")
   >>> trainer = Trainer(logger=logger)

   :param save_dir: Save directory
   :type save_dir: str
   :param name: Experiment name. Defaults to ``'default'``. If it is the empty string then no
                per-experiment subdirectory is used.
   :type name: Optional, str
   :param version: Experiment version. If version is not specified the logger inspects the save
                   directory for existing versions, then automatically assigns the next available version.
                   If it is a string then it is used as the run-specific subdirectory name,
                   otherwise ``'version_${version}'`` is used.
   :type version: Optional, int, str
   :param log_graph: Adds the computational graph to tensorboard. This requires that
                     the user has defined the `self.example_input_array` attribute in their
                     model.
   :type log_graph: bool
   :param default_hp_metric: Enables a placeholder metric with key `hp_metric` when `log_hyperparams` is
                             called without a metric (otherwise calls to log_hyperparams without a metric are ignored).
   :type default_hp_metric: bool
   :param prefix: A string to put at the beginning of metric keys.
   :type prefix: str
   :param \*\*kwargs: Additional arguments like `comment`, `filename_suffix`, etc. used by
                      :class:`SummaryWriter` can be passed as keyword arguments in this logger.

   .. py:method:: add_image(self, image: Union[numpy.ndarray, matplotlib.figure.Figure], name: Optional[str] = None, **kwargs: Any)

      Interface to add image to tensorboard logger.

      :param image: Image to log
      :type image: Union[np.ndarray, Figure]
      :param name: The tag of the image
      :type name: Optional[str]
      :param kwargs: Accepts only `global_step` (int). The step at which to log the image.



