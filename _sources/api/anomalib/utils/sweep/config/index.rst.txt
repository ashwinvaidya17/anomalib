:py:mod:`anomalib.utils.sweep.config`
=====================================

.. py:module:: anomalib.utils.sweep.config

.. autoapi-nested-parse::

   Utilities for modifying the configuration.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   anomalib.utils.sweep.config.flatten_sweep_params
   anomalib.utils.sweep.config.get_run_config
   anomalib.utils.sweep.config.get_from_nested_config
   anomalib.utils.sweep.config.set_in_nested_config



.. py:function:: flatten_sweep_params(params_dict: omegaconf.DictConfig) -> omegaconf.DictConfig

   Flatten the nested parameters section of the config object.

   We need to flatten the params so that all the nested keys are concatenated into a single string.
   This is useful when
   - We need to do a cartesian product of all the combinations of the configuration for grid search.
   - Save keys as headers for csv
   - Add the config to `wandb` sweep.

   :param params_dict: DictConfig: The dictionary containing the hpo parameters in the original, nested, structure.

   :returns: flattened version of the parameter dictionary.


.. py:function:: get_run_config(params_dict: omegaconf.DictConfig) -> Generator[omegaconf.DictConfig, None, None]

   Yields configuration for a single run.

   :param params_dict: Configuration for grid search.
   :type params_dict: DictConfig

   .. rubric:: Example

   >>> dummy_config = DictConfig({
       "parent1":{
           "child1": ['a', 'b', 'c'],
           "child2": [1, 2, 3]
       },
       "parent2":['model1', 'model2']
   })
   >>> for run_config in get_run_config(dummy_config):
   >>>    print(run_config)
   {'parent1.child1': 'a', 'parent1.child2': 1, 'parent2': 'model1'}
   {'parent1.child1': 'a', 'parent1.child2': 1, 'parent2': 'model2'}
   {'parent1.child1': 'a', 'parent1.child2': 2, 'parent2': 'model1'}
   ...

   :Yields: *Generator[DictConfig]* -- Dictionary containing flattened keys
            and values for current run.


.. py:function:: get_from_nested_config(config: omegaconf.DictConfig, keymap: List) -> Any

   Retrieves an item from a nested config object using a list of keys.

   :param config: DictConfig: nested DictConfig object
   :param keymap: List[str]: list of keys corresponding to item that should be retrieved.


.. py:function:: set_in_nested_config(config: omegaconf.DictConfig, keymap: List, value: Any)

   Set an item in a nested config object using a list of keys.

   :param config: DictConfig: nested DictConfig object
   :param keymap: List[str]: list of keys corresponding to item that should be set.
   :param value: Any: Value that should be assigned to the dictionary item at the specified location.

   .. rubric:: Example

   >>> dummy_config = DictConfig({
       "parent1":{
           "child1": ['a', 'b', 'c'],
           "child2": [1, 2, 3]
       },
       "parent2":['model1', 'model2']
   })
   >>> model_config = DictConfig({
       "parent1":{
           "child1": 'e',
           "child2": 4,
       },
       "parent3": False
   })
   >>> for run_config in get_run_config(dummy_config):
   >>>    print("Original model config", model_config)
   >>>    print("Suggested config", run_config)
   >>>    for param in run_config.keys():
   >>>        set_in_nested_config(model_config, param.split('.'), run_config[param])
   >>>    print("Replaced model config", model_config)
   >>>    break
   Original model config {'parent1': {'child1': 'e', 'child2': 4}, 'parent3': False}
   Suggested config {'parent1.child1': 'a', 'parent1.child2': 1, 'parent2': 'model1'}
   Replaced model config {'parent1': {'child1': 'a', 'child2': 1}, 'parent3': False, 'parent2': 'model1'}


