:py:mod:`anomalib.post_processing.visualizer`
=============================================

.. py:module:: anomalib.post_processing.visualizer

.. autoapi-nested-parse::

   Anomaly Visualization.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   anomalib.post_processing.visualizer.Visualizer




.. py:class:: Visualizer(num_rows: int, num_cols: int, figure_size: Tuple[int, int])

   Anomaly Visualization.

   The visualizer object is responsible for collating all the images passed to it into a single image. This can then
   either be logged by accessing the `figure` attribute or can be saved directly by calling `save()` method.

   .. rubric:: Example

   >>> visualizer = Visualizer(num_rows=1, num_cols=5, figure_size=(12, 3))
   >>> visualizer.add_image(image=image, title="Image")
   >>> visualizer.close()

   :param num_rows: Number of rows of images in the figure.
   :type num_rows: int
   :param num_cols: Number of columns/images in each row.
   :type num_cols: int
   :param figure_size: Size of output figure
   :type figure_size: Tuple[int, int]

   .. py:method:: add_image(self, image: numpy.ndarray, title: str, color_map: Optional[str] = None, index: Optional[int] = None)

      Add image to figure.

      :param image: Image which should be added to the figure.
      :type image: np.ndarray
      :param title: Image title shown on the plot.
      :type title: str
      :param color_map: Name of matplotlib color map used to map scalar data to colours. Defaults to None.
      :type color_map: Optional[str]
      :param index: Figure index. Defaults to None.
      :type index: Optional[int]


   .. py:method:: show(self)

      Show image on a matplotlib figure.


   .. py:method:: save(self, filename: pathlib.Path)

      Save image.

      :param filename: Filename to save image
      :type filename: Path


   .. py:method:: close(self)

      Close figure.



