:py:mod:`anomalib.models.components.base`
=========================================

.. py:module:: anomalib.models.components.base

.. autoapi-nested-parse::

   Base classes for all anomaly components.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   anomaly_module/index.rst
   dynamic_module/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   anomalib.models.components.base.AnomalyModule
   anomalib.models.components.base.DynamicBufferModule




.. py:class:: AnomalyModule(params: Union[omegaconf.DictConfig, omegaconf.ListConfig])

   Bases: :py:obj:`pytorch_lightning.LightningModule`, :py:obj:`abc.ABC`

   AnomalyModule to train, validate, predict and test images.

   Acts as a base class for all the Anomaly Modules in the library.

   :param params: Configuration
   :type params: Union[DictConfig, ListConfig]

   .. py:method:: forward(self, batch)

      Forward-pass input tensor to the module.

      :param batch: Input Tensor
      :type batch: Tensor

      :returns: Output tensor from the model.
      :rtype: Tensor


   .. py:method:: validation_step(self, batch, batch_idx) -> dict
      :abstractmethod:

      To be implemented in the subclasses.


   .. py:method:: predict_step(self, batch: Any, batch_idx: int, _dataloader_idx: Optional[int] = None) -> Any

      Step function called during :meth:`~pytorch_lightning.trainer.trainer.Trainer.predict`.

      By default, it calls :meth:`~pytorch_lightning.core.lightning.LightningModule.forward`.
      Override to add any processing logic.

      :param batch: Current batch
      :type batch: Tensor
      :param batch_idx: Index of current batch
      :type batch_idx: int
      :param _dataloader_idx: Index of the current dataloader
      :type _dataloader_idx: int

      :returns: Predicted output


   .. py:method:: test_step(self, batch, _)

      Calls validation_step for anomaly map/score calculation.

      :param batch: Input batch
      :type batch: Tensor
      :param _: Index of the batch.

      :returns: Dictionary containing images, features, true labels and masks.
                These are required in `validation_epoch_end` for feature concatenation.


   .. py:method:: validation_step_end(self, val_step_outputs)

      Called at the end of each validation step.


   .. py:method:: test_step_end(self, test_step_outputs)

      Called at the end of each test step.


   .. py:method:: validation_epoch_end(self, outputs)

      Compute threshold and performance metrics.

      :param outputs: Batch of outputs from the validation step


   .. py:method:: test_epoch_end(self, outputs)

      Compute and save anomaly scores of the test set.

      :param outputs: Batch of outputs from the validation step


   .. py:method:: _compute_adaptive_threshold(self, outputs)


   .. py:method:: _collect_outputs(self, image_metric, pixel_metric, outputs)


   .. py:method:: _post_process(self, outputs)

      Compute labels based on model predictions.


   .. py:method:: _outputs_to_cpu(self, output)


   .. py:method:: _log_metrics(self)

      Log computed performance metrics.



.. py:class:: DynamicBufferModule

   Bases: :py:obj:`abc.ABC`, :py:obj:`torch.nn.Module`

   Torch module that allows loading variables from the state dict even in the case of shape mismatch.

   .. py:method:: get_tensor_attribute(self, attribute_name: str) -> torch.Tensor

      Get attribute of the tensor given the name.

      :param attribute_name: Name of the tensor
      :type attribute_name: str

      :raises ValueError: `attribute_name` is not a torch Tensor

      :returns: Tensor attribute
      :rtype: Tensor


   .. py:method:: _load_from_state_dict(self, state_dict: dict, prefix: str, *args)

      Resizes the local buffers to match those stored in the state dict.

      Overrides method from parent class.

      :param state_dict: State dictionary containing weights
      :type state_dict: dict
      :param prefix: Prefix of the weight file.
      :type prefix: str
      :param \*args:



