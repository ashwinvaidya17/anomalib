:py:mod:`anomalib.models.components.dimensionality_reduction.pca`
=================================================================

.. py:module:: anomalib.models.components.dimensionality_reduction.pca

.. autoapi-nested-parse::

   Principle Component Analysis (PCA) with PyTorch.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   anomalib.models.components.dimensionality_reduction.pca.PCA




.. py:class:: PCA(n_components: Union[float, int])

   Bases: :py:obj:`anomalib.models.components.base.DynamicBufferModule`

   Principle Component Analysis (PCA).

   :param n_components: Number of components. Can be either integer number of components
                        or a ratio between 0-1.
   :type n_components: float

   .. py:method:: fit(self, dataset: torch.Tensor) -> None

      Fits the PCA model to the dataset.

      :param dataset: Input dataset to fit the model.
      :type dataset: Tensor


   .. py:method:: fit_transform(self, dataset: torch.Tensor) -> torch.Tensor

      Fit and transform PCA to dataset.

      :param dataset: Dataset to which the PCA if fit and transformed
      :type dataset: Tensor

      :returns: Transformed dataset


   .. py:method:: transform(self, features: torch.Tensor) -> torch.Tensor

      Transforms the features based on singular vectors calculated earlier.

      :param features: Input features
      :type features: Tensor

      :returns: Transformed features


   .. py:method:: inverse_transform(self, features: torch.Tensor) -> torch.Tensor

      Inverses the transformed features.

      :param features: Transformed features
      :type features: Tensor

      Returns: Inverse features


   .. py:method:: forward(self, features: torch.Tensor) -> torch.Tensor

      Transforms the features.

      :param features: Input features
      :type features: Tensor

      :returns: Transformed features



