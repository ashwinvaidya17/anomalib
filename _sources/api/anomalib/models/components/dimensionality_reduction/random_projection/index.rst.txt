:py:mod:`anomalib.models.components.dimensionality_reduction.random_projection`
===============================================================================

.. py:module:: anomalib.models.components.dimensionality_reduction.random_projection

.. autoapi-nested-parse::

   This module comprises PatchCore Sampling Methods for the embedding.

   - Random Sparse Projector
       Sparse Random Projection using PyTorch Operations



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   anomalib.models.components.dimensionality_reduction.random_projection.SparseRandomProjection




.. py:exception:: NotFittedError

   Bases: :py:obj:`ValueError`, :py:obj:`AttributeError`

   Raise Exception if estimator is used before fitting.


.. py:class:: SparseRandomProjection(eps: float = 0.1, random_state: Optional[int] = None)

   Sparse Random Projection using PyTorch operations.

   :param eps: Minimum distortion rate parameter for calculating
               Johnson-Lindenstrauss minimum dimensions. Defaults to 0.1.
   :type eps: float, optional
   :param random_state: Uses the seed to set the random
                        state for sample_without_replacement function. Defaults to None.
   :type random_state: Optional[int], optional

   .. py:method:: _sparse_random_matrix(self, n_features: int)

      Random sparse matrix. Based on https://web.stanford.edu/~hastie/Papers/Ping/KDD06_rp.pdf.

      :param n_features: Dimentionality of the original source space
      :type n_features: int

      :returns:

                Sparse matrix of shape (n_components, n_features).
                    The generated Gaussian random matrix is in CSR (compressed sparse row)
                    format.
      :rtype: Tensor


   .. py:method:: johnson_lindenstrauss_min_dim(self, n_samples: int, eps: float = 0.1)

      Find a 'safe' number of components to randomly project to.

      Ref eqn 2.1 https://cseweb.ucsd.edu/~dasgupta/papers/jl.pdf

      :param n_samples: Number of samples used to compute safe components
      :type n_samples: int
      :param eps: Minimum distortion rate. Defaults to 0.1.
      :type eps: float, optional


   .. py:method:: fit(self, embedding: torch.Tensor) -> SparseRandomProjection

      Generates sparse matrix from the embedding tensor.

      :param embedding: embedding tensor for generating embedding
      :type embedding: Tensor

      :returns: Return self to be used as
                >>> generator = SparseRandomProjection()
                >>> generator = generator.fit()
      :rtype: (SparseRandomProjection)


   .. py:method:: transform(self, embedding: torch.Tensor) -> torch.Tensor

      Project the data by using matrix product with the random matrix.

      :param embedding: Embedding of shape (n_samples, n_features)
                        The input data to project into a smaller dimensional space
      :type embedding: Tensor

      :returns:

                Sparse matrix of shape
                    (n_samples, n_components) Projected array.
      :rtype: projected_embedding (Tensor)



