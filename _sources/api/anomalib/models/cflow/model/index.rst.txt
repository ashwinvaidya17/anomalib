:py:mod:`anomalib.models.cflow.model`
=====================================

.. py:module:: anomalib.models.cflow.model

.. autoapi-nested-parse::

   CFLOW: Real-Time  Unsupervised Anomaly Detection via Conditional Normalizing Flows.

   https://arxiv.org/pdf/2107.12571v1.pdf



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   anomalib.models.cflow.model.AnomalyMapGenerator
   anomalib.models.cflow.model.CflowModel
   anomalib.models.cflow.model.CflowLightning




.. py:class:: AnomalyMapGenerator(image_size: Union[omegaconf.ListConfig, Tuple], pool_layers: List[str])

   Generate Anomaly Heatmap.

   .. py:method:: compute_anomaly_map(self, distribution: Union[List[torch.Tensor], List[List]], height: List[int], width: List[int]) -> torch.Tensor

      Compute the layer map based on likelihood estimation.

      :param distribution: Probability distribution for each decoder block
      :param height: blocks height
      :param width: blocks width

      :returns: Final Anomaly Map


   .. py:method:: __call__(self, **kwargs: Union[List[torch.Tensor], List[int], List[List]]) -> torch.Tensor

      Returns anomaly_map.

      Expects `distribution`, `height` and 'width' keywords to be passed explicitly

      Example
      >>> anomaly_map_generator = AnomalyMapGenerator(image_size=tuple(hparams.model.input_size),
      >>>        pool_layers=pool_layers)
      >>> output = self.anomaly_map_generator(distribution=dist, height=height, width=width)

      :raises ValueError: `distribution`, `height` and 'width' keys are not found

      :returns: anomaly map
      :rtype: torch.Tensor



.. py:class:: CflowModel(hparams: Union[omegaconf.DictConfig, omegaconf.ListConfig])

   Bases: :py:obj:`torch.nn.Module`

   CFLOW: Conditional Normalizing Flows.

   .. py:method:: forward(self, images)

      Forward-pass images into the network to extract encoder features and compute probability.

      :param images: Batch of images.

      :returns: Predicted anomaly maps.



.. py:class:: CflowLightning(hparams)

   Bases: :py:obj:`anomalib.models.components.AnomalyModule`

   PL Lightning Module for the CFLOW algorithm.

   .. py:method:: configure_callbacks(self)

      Configure model-specific callbacks.


   .. py:method:: configure_optimizers(self) -> torch.optim.Optimizer

      Configures optimizers for each decoder.

      :returns: Adam optimizer for each decoder
      :rtype: Optimizer


   .. py:method:: training_step(self, batch, _)

      Training Step of CFLOW.

      For each batch, decoder layers are trained with a dynamic fiber batch size.
      Training step is performed manually as multiple training steps are involved
          per batch of input images

      :param batch: Input batch
      :param _: Index of the batch.

      :returns: Loss value for the batch


   .. py:method:: validation_step(self, batch, _)

      Validation Step of CFLOW.

          Similar to the training step, encoder features
          are extracted from the CNN for each batch, and anomaly
          map is computed.

      :param batch: Input batch
      :param _: Index of the batch.

      :returns: Dictionary containing images, anomaly maps, true labels and masks.
                These are required in `validation_epoch_end` for feature concatenation.



