:py:mod:`anomalib.pre_processing.transforms`
============================================

.. py:module:: anomalib.pre_processing.transforms

.. autoapi-nested-parse::

   Anomalib Data Transforms.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   custom/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   anomalib.pre_processing.transforms.Denormalize
   anomalib.pre_processing.transforms.ToNumpy




.. py:class:: Denormalize(mean: Optional[List[float]] = None, std: Optional[List[float]] = None)

   Denormalize Torch Tensor into np image format.

   .. py:method:: __call__(self, tensor: torch.Tensor) -> numpy.ndarray

      Denormalize the input.

      :param tensor: Input tensor image (C, H, W)
      :type tensor: Tensor

      :returns: Denormalized numpy array (H, W, C).


   .. py:method:: __repr__(self)

      Representational string.



.. py:class:: ToNumpy

   Convert Tensor into Numpy Array.

   .. py:method:: __call__(self, tensor: torch.Tensor, dims: Optional[Tuple[int, Ellipsis]] = None) -> numpy.ndarray

      Convert Tensor into Numpy Array.

      :param tensor: Tensor to convert. Input tensor in range 0-1.
      :type tensor: Tensor
      :param dims: Convert dimensions from torch to numpy format.
                   Tuple corresponding to axis permutation from torch tensor to numpy array. Defaults to None.
      :type dims: Optional[Tuple[int, ...]], optional

      :returns: Converted numpy ndarray.


   .. py:method:: __repr__(self) -> str

      Representational string.



